#!/usr/bin/env python
#
# Copyright 2012 SUSE Linux
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

import argparse
from datetime import datetime
import re
import sys
import tarfile
import urllib


TARBALLS = 'http://tarballs.openstack.org'
COMMIT_HASH_SIZE = 7


parser = argparse.ArgumentParser(description='Cloud Tarballs')
parser.add_argument('--component', required=True,
                    help='openstack component e.g. nova, keystone, novaclient')
parser.add_argument('--version', required=True,
                    help='component version')
parser.add_argument('--filename', required=True,
                    help='where to save the downloaded tarball')
parser.add_argument('--package', required=True,
                    help='the rpm package name')


def download_tarball(component, version, filename):
    """Download an upstream tarball

    :component: name of an openstack component
    :version: the version of the tarball
    :filename: where to save the downloaded tarball

    """
    url = '%(host)s/%(component)s/%(component)s-%(version)s.tar.gz' % {
        'host': TARBALLS, 'component': component, 'version': version}

    try:
        urllib.urlretrieve(url, filename)
    except IOError as e:
        sys.exit(e)


def get_changelog_from_tarball(tar_name):
    basename = tar_name.split('.tar.gz')[0]
    with tarfile.open(tar_name) as tar:
        changelog_file = next(f for f in tar.getnames()
                              if f.endswith('ChangeLog'))
        t = tar.getmember(changelog_file)
        changelog = tar.extractfile(t).read()
    return changelog


def get_latest_commit(changelog):
    try:
        return re.search(r'^commit (.*?)$', changelog, re.MULTILINE).group(1)
    except AttributeError:
        sys.exit("Could not parse ChangeLog file.")


def parse_changelog(changelog):
    """Parse a git ChangeLog file returning an iterable of dicts

    :changelog: string with the contents of the file

    """
    try:
        # FIXME: we can actually ignore Merge commits altogether.
        return re.finditer(r'^commit (?P<commit>.*?)$'
                           '.*?'
                           '^Author:\s+(?P<author>.*?)$'
                           '.*?'
                           '^Date:\s+(?P<date>.*?)$'
                           '.*?'
                           '\n\n\s+(?P<message>.*?)$'
                           '(?:\n\n|\n.*?)',
                           changelog, re.MULTILINE | re.DOTALL)
    except AttributeError:
        sys.exit("Could not parse ChangeLog file.")


def get_commit_from_spec(package):
    with open(package + '.spec') as f:
        try:
            return re.search(r'^Version:\s+.*\+git\.\d+\.(.*?)(\s+#)?$',
                             f.read(), flags=re.MULTILINE).group(1)
        except AttributeError:
            sys.exit("Could not parse version from spec file")


def update_version_in_spec(package, version, latest_commit):
    new_version = '%s.%s.%s' % (version.replace('-', '_'),
                                datetime.utcnow().strftime('%s'),
                                latest_commit[:COMMIT_HASH_SIZE])
    with open(package + '.spec', 'r+') as f:
        contents = f.read()
        f.seek(0)
        f.write(re.sub(r'((Version:\s+).*)\n', r'\2%s\n' % new_version,
                       contents, re.MULTILINE))


def diff_changes(changes_list, our_version):
    """Return a list of dict changes newer than the ones in our_version
    
    :changes_list: a list of dicts from the ChangeLog file
    :our_version: a git commit hash of the current version from the spec file

    Returns an empty list if there are no newer commits.

    """
    new_changes = []
    for change in changes_list:
        change = change.groupdict()
        if change['commit'].startswith(our_version):
            break
        new_changes.append(change)

    return new_changes


def create_changes(changes_list, our_version):
    """Return a string with the new changes for the .changes file

    :changes_list: a list of dicts from the ChangeLog file
    :our_version: a git commit hash of the current version from the spec file

    """
    changes_diff = diff_changes(changes_list, our_version)
    if not changes_diff:
        sys.exit("There are no new changes.")

    timestamp = datetime.utcnow().strftime('%a %b %e %T UTC %Y')
    author = 'cloud-devel@suse.de'
    commit_hash = changes_diff[0]['commit'][:COMMIT_HASH_SIZE]
    commits = "  + " + "\n  + ".join(c['message'] for c in changes_diff)

    change = (
        '--------------------------------------------------------------------\n'
        '%(timestamp)s - %(author)s\n'
        '\n'
        '- Update to latest git (%(commit_hash)s):\n'
        '%(commits)s\n'
        '\n' % locals())

    return change


def update_changes_file(package, changes):
    with open(package + '.changes', 'r+') as f:
        contents = f.read()
        f.seek(0)
        f.write(changes)
        f.write(contents)


if __name__ == '__main__':
    args = parser.parse_args()
    download_tarball(args.component, args.version, args.filename)
    changelog = get_changelog_from_tarball(args.filename)
    our_commit = get_commit_from_spec(args.package)
    changes_list = parse_changelog(changelog)
    changes = create_changes(changes_list, our_commit)
    update_changes_file(args.package, changes)

    latest_commit = get_latest_commit(changelog)
    update_version_in_spec(args.package, args.version, latest_commit)
